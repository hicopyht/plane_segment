#!/usr/bin/env python
PACKAGE = "plane_segment"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

size_type_enum = gen.enum([
                        gen.const("VGA",       int_t, 0, ""),
                        gen.const("QVGA",  int_t, 1, ""),
                        gen.const("QQVGA",     int_t, 2, "")
                       ], "Size of organized cloud as input.")

segment_enum = gen.enum([
                        gen.const("None",       int_t, 0, ""),
                        gen.const("LineBased",  int_t, 1, ""),
                        gen.const("RANSAC",     int_t, 2, ""),
                        gen.const("Organized",  int_t, 3, ""),
                        gen.const("RegionGrow", int_t, 4, ""),
                        gen.const("AllExceptRegionGrow", int_t, 5, ""),
                        gen.const("LB_OMPS", int_t, 6, ""),
                        gen.const("AllMethod",  int_t, 7, "")
                       ], "Method to segment plane.")

##
gen.add("cloud_size_type",  int_t, 0, "",   0, 0, 2, edit_method=size_type_enum)
gen.add("segment_method", int_t, 0, "Method to segment plane", 6, 0, 7, edit_method=segment_enum)
gen.add("voxel_grid_downsample_size", double_t, 0, "", 0.02, 0.001, 0.1)
##
gen.add("print_plane_coefficients",  bool_t, 0, "", False)
gen.add("evaluate_run_time", bool_t, 0, "", False)
gen.add("loop_one_message", bool_t, 0,  "", False)
gen.add("loop_message", int_t, 0, "",  0,  0, 20000)


exit(gen.generate(PACKAGE, "plane_segment", "PlaneSegment"))
